git操作

>>>>>切换分支
1.team - switch to - other
2.在remote tracking(远程分支)选择
3.checkout

>>>>>新建分支
1.team - switch to - new branch
2.填写新分支名称，在本地创建新分支
3.push branch 'xxx'

>>>>>更新代码（fetch+merge=pull，但是pull不够安全）
<先更新日志，在合并>
1.team - fetch from upStream
2.team - merge
<直接更新到>
1.team - pull直接将远程服务器更新到当前分支



>>>>>提交
1.team-commit提交到本地仓库
2.填写提交注释
3.项目后有个箭头比远程仓库多几个版本
4.team-push to upStream提交到远程仓库

>>>>>回滚



部署git
$ git clone <git url>

查看本地分支：
$ git branch -v

查看所有分支：
$ git branch -a

查看分支状态：
$ git remote show origin

同步分支状态：
$ git remote prune origin

复制当前版本，新建本地分支：
$ git branch <branchName>

复制当前版本，新建并切换本地分支：
$ git checkout -b <branchName>

重命名本地分支：
$ git branch -m <current branchName> <new branchName>

删除本地分支：
$ git branch -D <branchName>

推送当前分支到远程仓库：
$ git push origin <local branchName>

推送某分支至远程仓库并指定名字：
$ git push origin <local branchName>:<remote branchName>

删除远程分支（两种）：
1.推送一个空分支到远程分支
$ git push origin :<branchName>
2.v1.7.0之后版本
$ git push origin --delete <branchName>

本地当前代码库回滚：
$ git reset --hard <commit_id>

本地当前代码库回滚x次
$ git reset --hard HEAD~x

回滚远程分支：
1.新建当前本地分支备份
$ git branch <branchName_backup>
2.先将本地分支回滚到某commit_id
$ git reset --hard <commit_id>
3.删除远程分支
$ git push origin :<remote branchName>
4.重新push本地分支到远程
$ git push origin <local branchName>
5.成功之后，删除本地备份
$ git branch -D <branchName_backup>


更新代码（临时分支）
1.获取远程代码到本地指定临时
$ git fetch origin <remote branchName>:<local temp branch>
2.合并临时分支到当前分支
$ git merge <local temp branchName>
更新代码（不产生新分支）
1.获取远程分支fetch信息
$ git fetch origin <remote branchName>
2.合并远程分支到当前分支
$ git merge <remote branchName>

$ git log -p master origin/master